name: Deploy Website Test --> Production

on:
  push:
    branches: [main]

jobs:
  deploy-test:
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Put server 1 in maintenance mode (test_server)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VM1_HOST  }}
          username: ${{ secrets.VM1_USERNAME  }}
          key: ${{ secrets.VM1_KEY }}
          script: |
            sudo ufw deny 80
            sudo ufw deny 443
            sudo ufw status

      - name: Deploy to server 1 (test_server)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VM1_HOST  }}
          username: ${{ secrets.VM1_USERNAME  }}
          key: ${{ secrets.VM1_KEY }}
          script: |
            echo ${{secrets.PAT}}
            cd /var/www/html
            sudo rm -rf *
            sudo git clone https://${{secrets.PAT}}@github.com/LucasCode812/Lucas-test-pipeline.git
            sudo mv /var/www/html/Lucas-test-pipeline/* /var/www/html/
            sudo rm -rf ./Lucas-test-pipeline/

      - name: Take server 1 (test_server) out of maintenance mode
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VM1_HOST  }}
          username: ${{ secrets.VM1_USERNAME  }}
          key: ${{ secrets.VM1_KEY }}
          script: |
            sudo ufw allow 80
            sudo ufw allow 443
            sudo ufw status

      - name: Test server 1 (test_server)
        run: |
          response=$(curl -I ${{ secrets.VM1_HOST  }} | head -n 1 | cut -d$' ' -f2)
          if [[ $response -ne 200 ]]; then
            echo "Error: Server 1 returned status code $response"
            exit 1
          fi

  deploy-prod:
    runs-on: ubuntu-latest
    environment: prod
    needs: [deploy-test]

    steps:
      - name: Wait for approval
        uses: pullreminders/approval-action@v2.3.0
        id: approval
        with:
          message: 'Please review and approve the deployment to production'

      - name: Put server 2 in maintenance mode (production_server)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VM2_HOST }}
          username: ${{ secrets.VM2_USERNAME  }}
          key: ${{ secrets.VM2_KEY }}
          script: |
            sudo ufw deny 80
            sudo ufw deny 443
            sudo ufw status

      - name: Deploy to server 2 (production_server)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VM2_HOST }}
          username: ${{ secrets.VM2_USERNAME  }}
          key: ${{ secrets.VM2_KEY }}
          script: |
            cd /var/www/html
            sudo rm -rf *
            sudo git clone https://${{secrets.PAT}}@github.com/LucasCode812/Lucas-test-pipeline.git
            sudo mv /var/www/html/Lucas-test-pipeline/* /var/www/html/
            sudo rm -rf ./Lucas-test-pipeline/

      - name: Put server 2 in maintenance mode (production_server)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VM2_HOST }}
          username: ${{ secrets.VM2_USERNAME  }}
          key: ${{ secrets.VM2_KEY }}
          script: |
            sudo ufw allow 80
            sudo ufw allow 443
            sudo ufw status

      - name: Test server 2 (production_server)
        run: |
          response=$(curl -I ${{ secrets.VM2_HOST }} | head -n 1 | cut -d$' ' -f2)
          if [[ $response -ne 200 ]]; then
            echo "Error: Server 2 returned status code $response"
            exit 1
          fi

      - name: Put server 1 in paused mode (test_server)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VM1_HOST }}
          username: ${{ secrets.VM1_USERNAME  }}
          key: ${{ secrets.VM1_KEY }}
          script: |
            sudo ufw deny 80
            sudo ufw deny 443
            sudo ufw status
